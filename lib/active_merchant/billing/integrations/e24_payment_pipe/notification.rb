require 'openssl'
require 'time'

module ActiveMerchant #:nodoc:
  module Billing #:nodoc:
    module Integrations #:nodoc:
      module E24PaymentPipe

        # Handle ACI notifications, sent upon PaymentInit transaction requests
        #
        # Find the official documentation here:
        #   http://groups.drupal.org/files/Merchant_Integration_Guide_v3.2_0.pdf
        #
        # Example:


        class Notification < ActiveMerchant::Billing::Integrations::Notification

          def complete?
            status == 'Completed'
          end

          # The merchant assigned tracking ID. This ID should be unique, although
          # no validation for this is provided within the ACI Commerce Gateway.
          def item_id
            params['trackid']
          end

          # Unique ID generated by and used within the ACI Commerce Gateway to
          # identify a payment.
          def transaction_id
            params['paymentid']
          end

          # The authentication code value returned from the host.
          def authorization_code
            params['auth']
          end

          # Unique number generated and assigned by the ACI Commerce Gateway
          # to a transaction going to the host. This number is used to track
          # chargebacks back to ACI Commerce Gateway transactions.
          def reference_number
            params['ref']
          end

          # The host-specified posting date that will be used for the current transaction.
          def received_at
            Time.strptime(params['postdate'], '%m%d') rescue nil
          end

          # The host authorization response code from which the result code is calculated.
          def response_code
            params['responsecode']
          end

          # The internal ACI Commerce Gateway error code returned from the
          # transaction request.
          def error
            params['error_code_tag'] || params['Error']
          end

          # A server-localized textual string explaining the meaning of the
          # error_code_tag value if available.
          def error_message
            params['error_text'] || params['ErrorText']
          end

          def service_name
            params['MerchantNotification']
          end

          # The electronic commerce indicator. This field is a network specific value
          # which correlates to the success or failure of the transaction. This value is
          # different based on the card type and brand.
          #
          # On requests, the ECI field represents the ECI returned from the ACS and
          # is required for network liability shift along with the XID and CAVV
          # fields. If any of these three fields is empty, the liability shift cannot be
          # obtained.
          def eci_number
            params['eci']
          end

          # The ACI Commerce Gateway string representing the result code, based
          # on the host response code. Valid responses:
          #
          #   CAPTURED        The transaction was captured.
          #   APPROVED        The transaction was approved.
          #   VOIDED          The transaction was voided.
          #   NOT CAPTURED    The transaction was not captured.
          #   NOT APPROVED    The transaction was not approved.
          #   NOT VOIDED      The transaction was not voided.
          #   DENIED BY RISK  Risk denied the transaction.
          #   FAILED AVS      The transaction did not pass address verification.
          #   HOST TIMEOUT    The authorization system did not respond within the
          #                   timeout limit
          #   CANCELED        user cancelled payment
          #
          def result
            if error.blank?
              authorized? ? params['result'] : 'NOT_AUTHORIZED'
            else
              'ERROR'
            end
          end

          def payment_info
            info = "RESULT: #{response_code} - #{result}(Original: #{params['result']})."
            info << "ERROR: #{error} - #{error_message}" unless error.blank?
          end

          def status
            case result
            when 'CAPTURED'
              'Completed'
            when 'CANCELED'
              'Cancelled'
            else
              'Error'
            end
          end

          def authorized?
            authorization_code.present? && authorization_code.to_s != '0'
          end

          def acknowledge
            true
          end
        end
      end
    end
  end
end
